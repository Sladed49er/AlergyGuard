// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User account
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // For email/password auth
  image         String?   // Profile picture URL
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  profiles      Profile[]
  accounts      Account[] // For OAuth providers
  sessions      Session[]
}

// For NextAuth OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// For NextAuth sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Family member profiles (including the user themselves)
model Profile {
  id              String    @id @default(cuid())
  userId          String
  name            String
  dateOfBirth     DateTime?
  relationship    String    // "self", "child", "spouse", "parent", etc.
  image           String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  allergies       Allergy[]
  emergencyContacts EmergencyContact[]
  mealPlans       MealPlan[]
}

// Allergies for each profile
model Allergy {
  id              String    @id @default(cuid())
  profileId       String
  allergen        String    // "peanuts", "milk", "shellfish", etc.
  severity        Severity  // MILD, MODERATE, SEVERE, LIFE_THREATENING
  notes           String?   // Additional notes
  symptoms        String[]  // Array of common symptoms
  diagnosed       Boolean   @default(false)
  diagnosedDate   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  profile         Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

// Emergency contacts for profiles
model EmergencyContact {
  id              String    @id @default(cuid())
  profileId       String
  name            String
  relationship    String    // "doctor", "parent", "emergency"
  phone           String
  email           String?
  isPrimary       Boolean   @default(false)
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  profile         Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

// Meal plans generated by AI
model MealPlan {
  id              String    @id @default(cuid())
  profileId       String
  name            String
  description     String?
  meals           Json      // Store meal data as JSON
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  profile         Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

// Enum for allergy severity
enum Severity {
  MILD
  MODERATE
  SEVERE
  LIFE_THREATENING
}