generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String?
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  profiles  Profile[]
  sessions  Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id                String             @id @default(cuid())
  userId            String
  name              String
  dateOfBirth       DateTime?
  relationship      String
  image             String?
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  allergies         Allergy[]
  emergencyContacts EmergencyContact[]
  mealPlans         MealPlan[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Allergy {
  id            String    @id @default(cuid())
  profileId     String
  allergen      String
  severity      Severity
  notes         String?
  symptoms      String[]
  diagnosed     Boolean   @default(false)
  diagnosedDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model EmergencyContact {
  id           String   @id @default(cuid())
  profileId    String
  name         String
  relationship String
  phone        String
  email        String?
  isPrimary    Boolean  @default(false)
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model MealPlan {
  id          String   @id @default(cuid())
  profileId   String
  name        String
  description String?
  meals       Json
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

enum Severity {
  MILD
  MODERATE
  SEVERE
  LIFE_THREATENING
}
